<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andy的博客</title>
  
  <subtitle>Gopher</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andyli.me/"/>
  <updated>2018-01-27T15:43:34.964Z</updated>
  <id>http://andyli.me/</id>
  
  <author>
    <name>Andy Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang变量作用域问题-避免使用全局变量</title>
    <link href="http://andyli.me/2018/01/27/golang-variable-scope-problem/"/>
    <id>http://andyli.me/2018/01/27/golang-variable-scope-problem/</id>
    <published>2018-01-27T15:28:56.000Z</published>
    <updated>2018-01-27T15:43:34.964Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到了一个变量作用域的问题，一个比较低级的问题，可能作为一个熟手不应该犯这样的低级错误，但是golang的语法特点可能让你稍微不注意就踩坑，嘿嘿。</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>全局变量的作用域是整个包，局部变量的作用域是该变量所在的花括号内，这是一个很基础的问题。我们通常会使用golang的一个语法糖<code>:=</code>来给变量赋值，这种方式可以节省掉我们定义变量的代码，让代码变的更加简洁，但是如果你定义了一个全局变量，又不小心用<code>:=</code>来给它赋值，就会出现一些问题。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>看下面的代码，定义了一个全局变量<code>t</code>，我想在<code>init()</code>中给他赋值为2，然后在main中使用它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var t int</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">t, err := strconv.Atoi(&quot;2&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;init:&quot;, t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;main:&quot;, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init: 2</span><br><span class="line">main: 0</span><br></pre></td></tr></table></figure></p><p>执行之后，在init和main中打印出了不一样的数字，为什么会不一样呢，可能你仔细一看就知道原因了。很简单，init中的t是用<code>:=</code>生成的，所以t是局部变量，在init函数中覆盖了全局变量t。全局变量t并没有被赋值，它还是原来的0值。</p><p>我本想在init中给全局变量t赋值的，却不小心用<code>:=</code>创建了一个局部变量导致全局变量t没有赋值成功，犯了一个低级错误。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>知道原因之后就容易解决了，我不使用<code>:=</code>就可以了。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var t int</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">var err error</span><br><span class="line">t, err = strconv.Atoi(&quot;2&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;init:&quot;, t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;main:&quot;, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init: 2</span><br><span class="line">main: 2</span><br></pre></td></tr></table></figure></p><p>没有使用<code>:=</code>之后，init中的t就是全局变量t，给全局变量t赋值为2，main中自然输出的就是2，实现了我最初的目的。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>这个问题很简单很低级，但是可能一个golang熟手，在代码远比demo要复杂的多的实际项目中，不经意间就可能会犯下这样的错误。</p><p>这个问题很难保证说下次一定不会出现的，除非你彻底不用全局变量或者彻底不用<code>:=</code>这样的语法糖。我的建议是这样：</p><ul><li>尽量少的使用全局变量。</li><li>尽量少的使用<code>:=</code>语法糖。</li><li>使用<code>:=</code>的时候要确保左值没有被定义过。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到了一个变量作用域的问题，一个比较低级的问题，可能作为一个熟手不应该犯这样的低级错误，但是golang的语法特点可能让你稍微不注意就踩坑，嘿嘿。&lt;/p&gt;
&lt;h3 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="golang" scheme="http://andyli.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>grpc-gateway：grpc转换为http协议对外提供服务</title>
    <link href="http://andyli.me/2017/12/27/golang-grpc-gateway/"/>
    <id>http://andyli.me/2017/12/27/golang-grpc-gateway/</id>
    <published>2017-12-27T15:28:56.000Z</published>
    <updated>2018-01-27T15:29:54.393Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我所在公司的项目是采用基于Restful的微服务架构，随着微服务之间的沟通越来越频繁，就希望可以做成用rpc来做内部的通讯，对外依然用Restful。于是就想到了google的grpc。</p></blockquote><p>使用grpc的优点很多，二进制的数据可以加快传输速度，基于http2的多路复用可以减少服务之间的连接次数，和函数一样的调用方式也有效的提升了开发效率。</p><p>不过使用grpc也会面临一个问题，我们的微服务对外一定是要提供Restful接口的，如果内部调用使用grpc，在某些情况下要同时提供一个功能的两套API接口，这样就不仅降低了开发效率，也增加了调试的复杂度。于是就想着有没有一个转换机制，让Restful和gprc可以相互转化。</p><p>在网上看到一个解决方案，<a href="https://github.com/grpc-ecosystem/grpc-gateway" target="_blank" rel="noopener">https://github.com/grpc-ecosystem/grpc-gateway</a>，简单的说就是有一个网关服务器负责转化和代理转发。</p><p>如下图：<br><img src="http://www.grpc.io/img/grpc-rest-gateway.png" alt="image"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先要安装ProtocolBuffers 3.0及以上版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir tmp</span><br><span class="line">cd tmp</span><br><span class="line">git clone https://github.com/google/protobuf</span><br><span class="line">cd protobuf</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>然后使用go get获取grpc-gateway。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway</span><br><span class="line">go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger</span><br><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure><p>这里最好把编译生成的二进制文件的目录放在<code>$PATH</code>中，可以把<code>$GOPATH/bin</code>放入<code>$PATH</code>中。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>本示例是基于我的上一篇博客《google的grpc在glang中的使用》中的示例，如果有必要请先了解上一篇博客。</p><p>示例代码获取地址:<a href="https://github.com/andyidea/go-example" target="_blank" rel="noopener">https://github.com/andyidea/go-example</a>。</p><p>代码文件结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    └── grpc-helloworld-gateway</span><br><span class="line">        ├── gateway</span><br><span class="line">        │   └── main.go</span><br><span class="line">        ├── greeter_server</span><br><span class="line">        │   └── main.go</span><br><span class="line">        └── helloworld</span><br><span class="line">            ├── helloworld.pb.go</span><br><span class="line">            ├── helloworld.pb.gw.go</span><br><span class="line">            └── helloworld.proto</span><br></pre></td></tr></table></figure></p><p>我们还是先看一下协议文件。helloworld.proto有一些变动，引入了google官方的api相关的扩展，为grpc的http转换提供了支持。</p><p>具体改动如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">option java_multiple_files = true;</span><br><span class="line">option java_package = &quot;io.grpc.examples.helloworld&quot;;</span><br><span class="line">option java_outer_classname = &quot;HelloWorldProto&quot;;</span><br><span class="line"></span><br><span class="line">package helloworld;</span><br><span class="line"></span><br><span class="line">import &quot;google/api/annotations.proto&quot;;</span><br><span class="line"></span><br><span class="line">// The greeting service definition.</span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;</span><br><span class="line">        option (google.api.http) = &#123;</span><br><span class="line">        post: &quot;/v1/example/echo&quot;</span><br><span class="line">        body: &quot;*&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&apos;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>和之前的proto文件比较，新的文件增了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;google/api/annotations.proto&quot;;</span><br></pre></td></tr></table></figure></p><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">option (google.api.http) = &#123;</span><br><span class="line">        post: &quot;/v1/example/echo&quot;</span><br><span class="line">        body: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>这里增加了对http的扩展配置。</p><p>然后编译proto文件，生成对应的go文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd src/grpc-helloworld-gateway</span><br><span class="line"></span><br><span class="line">protoc -I/usr/local/include -I. \</span><br><span class="line">-I$GOPATH/src \</span><br><span class="line">-I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \</span><br><span class="line">--go_out=Mgoogle/api/annotations.proto=github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api,plugins=grpc:. \</span><br><span class="line">helloworld/helloworld.proto</span><br></pre></td></tr></table></figure><p>这里生成了helloworld/helloworld.pb.go文件。</p><p>helloworld.pb.go是server服务需要的，下一步我们需要使用protoc生成gateway需要的go文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd src/grpc-helloworld-gateway</span><br><span class="line"></span><br><span class="line">protoc -I/usr/local/include -I. \</span><br><span class="line">-I$GOPATH/src  -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \</span><br><span class="line">--swagger_out=logtostderr=true:. \</span><br><span class="line">helloworld/helloworld.proto</span><br></pre></td></tr></table></figure><p>这里生成了helloworld/helloworld.pb.gw.go文件。这个文件就是gateway用来的协议文件，用来做grpc和http的协议转换。</p><p>协议文件处理完毕，就需要写gateway代码了。</p><p>gateway代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/golang/glog"</span></span><br><span class="line"><span class="string">"github.com/grpc-ecosystem/grpc-gateway/runtime"</span></span><br><span class="line"><span class="string">"golang.org/x/net/context"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line"></span><br><span class="line">gw <span class="string">"grpc-helloworld-gateway/helloworld"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">echoEndpoint = flag.String(<span class="string">"echo_endpoint"</span>, <span class="string">"localhost:50051"</span>, <span class="string">"endpoint of YourService"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">ctx, cancel := context.WithCancel(ctx)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">mux := runtime.NewServeMux()</span><br><span class="line">opts := []grpc.DialOption&#123;grpc.WithInsecure()&#125;</span><br><span class="line">err := gw.RegisterGreeterHandlerFromEndpoint(ctx, mux, *echoEndpoint, opts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(<span class="string">":8080"</span>, mux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">defer</span> glog.Flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先echoEndpoint存储了需要连接的server信息，然后将这些信息和新建的server用gw.go中的RegisterGreeterHandlerFromEndpoint进行一个注册和绑定，这时低层就会连接echoEndpoint提供的远程server地址，这样gateway就作为客户端和远程server建立了连接，之后用http启动新建的server，gateway就作为服务器端对外提供http的服务了。</p><p>代码到此就完成了，我们测试一下。</p><p>先启动greeter_server服务，再启动gateway，这时gatway连接上greeter_server后，对外建立http的监听。</p><p>然后我们用curl发送http请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -k http://localhost:8080/v1/example/echo -d &apos;&#123;&quot;name&quot;: &quot; world&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;message&quot;:&quot;Hello  world&quot;&#125;</span><br></pre></td></tr></table></figure><p>流程如下：curl用post向gateway发送请求，gateway作为proxy将请求转化一下通过grpc转发给greeter_server，greeter_server通过grpc返回结果，gateway收到结果后，转化成json返回给前端。</p><p>这样，就通过grpc-gateway完成了从http json到内部grpc的转化过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我所在公司的项目是采用基于Restful的微服务架构，随着微服务之间的沟通越来越频繁，就希望可以做成用rpc来做内部的通讯，对外依然用Restful。于是就想到了google的grpc。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用grpc的优点
      
    
    </summary>
    
    
      <category term="golang" scheme="http://andyli.me/tags/golang/"/>
    
      <category term="rpc" scheme="http://andyli.me/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>google的grpc在golang中的使用</title>
    <link href="http://andyli.me/2017/12/10/golang-grpc/"/>
    <id>http://andyli.me/2017/12/10/golang-grpc/</id>
    <published>2017-12-10T15:28:56.000Z</published>
    <updated>2018-01-27T15:30:34.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GRPC是google开源的一个高性能、跨语言的RPC框架，基于HTTP2协议，基于protobuf 3.x，基于Netty 4.x。</p></blockquote><p>前面写过一篇golang标准库的rpc包的用法，这篇文章接着讲一下google的grpc。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。</p><p><img src="http://www.grpc.io/img/grpc_concept_diagram_00.png" alt="image"></p><p>使用grpc的优点很多，支持多种语言，二进制的数据可以加快传输速度，基于http2的多路复用可以减少服务之间的连接次数，和函数一样的调用方式也有效的提升了开发效率。</p><p>grpc提供有go版本，下面介绍一下grpc在golang中的使用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>grpc支持1.5及以上版本。</p><p>用以下命令安装grpc-go:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get google.golang.org/grpc</span><br></pre></td></tr></table></figure><p>安装Protocol Buffers v3</p><p>去<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">https://github.com/google/protobuf/releases</a>下载最新的稳定的版本，然后解压缩，把里面的文件放到<code>$PATH</code>中。</p><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</span><br></pre></td></tr></table></figure><p>别忘了将<code>$GOPATH/bin</code>添加到<code>$PATH</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$GOPATH/bin</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例代码获取地址:<a href="https://github.com/andyidea/go-example" target="_blank" rel="noopener">https://github.com/andyidea/go-example</a>。</p><p>代码文件结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── bin</span><br><span class="line">│   ├── grpc-client</span><br><span class="line">│   └── grpc-server</span><br><span class="line">└── src</span><br><span class="line">    └── grpc-helloworld</span><br><span class="line">        ├── greeter_client</span><br><span class="line">        │   └── main.go</span><br><span class="line">        ├── greeter_server</span><br><span class="line">        │   └── main.go</span><br><span class="line">        └── helloworld</span><br><span class="line">            ├── helloworld.pb.go</span><br><span class="line">            └── helloworld.proto</span><br></pre></td></tr></table></figure></p><p>grpc-helloworld里有三个包，greeter_client是客户端代码，greeter_server是服务端代码，helloworld是协议文件。</p><p>先看下协议。</p><p>helloworld.proto</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">option java_multiple_files = true;</span><br><span class="line">option java_package = &quot;io.grpc.examples.helloworld&quot;;</span><br><span class="line">option java_outer_classname = &quot;HelloWorldProto&quot;;</span><br><span class="line"></span><br><span class="line">package helloworld;</span><br><span class="line"></span><br><span class="line">// The greeting service definition.</span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&apos;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协议中定义了两个结构体HelloRequest和HelloReply，还有一个函数SayHello，函数的参数是HelloRequest，返回HelloReply。</p><p>在<code>src/</code>下用下面命令生成协议的go文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I helloworld/ helloworld/helloworld.proto --go_out=plugins=grpc:helloworld</span><br></pre></td></tr></table></figure><p>这样就生成了helloworld.pb.go协议文件。</p><p>接着我们看下服务器端的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"golang.org/x/net/context"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pb <span class="string">"grpc-helloworld/helloworld"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc/reflection"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">port = <span class="string">":50051"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// server is used to implement helloworld.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayHello implements helloworld.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">"Hello "</span> + in.Name&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lis, err := net.Listen(<span class="string">"tcp"</span>, port)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to listen: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="comment">// Register reflection service on gRPC server.</span></span><br><span class="line">reflection.Register(s)</span><br><span class="line"><span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to serve: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端主要逻辑就是实现之前协议中的SayHello方法，这里是将字符串Hello和参数拼接在一起返回。</p><p>协议生成的go文件给了一个RegisterGreeterServer方法，我们用这个方法绑定实现函数的结构体和server。</p><p>然后是客户端代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"golang.org/x/net/context"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pb <span class="string">"grpc-helloworld/helloworld"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">address     = <span class="string">"localhost:50051"</span></span><br><span class="line">defaultName = <span class="string">"world"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Set up a connection to the server.</span></span><br><span class="line">conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"did not connect: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := pb.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Contact the server and print out its response.</span></span><br><span class="line">name := defaultName</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">name = os.Args[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not greet: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"Greeting: %s"</span>, r.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端的思路也很清晰，建立一个rpc客户端连接，将这个连接用pb.NewGreeterClient和协议绑定，返回一个client对象，用这个对象就可以调用远程的函数了。</p><p>调用输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Greeting: Hello world</span><br></pre></td></tr></table></figure><p>示例到此结束。示例代码获取地址:<a href="https://github.com/andyidea/go-example" target="_blank" rel="noopener">https://github.com/andyidea/go-example</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;GRPC是google开源的一个高性能、跨语言的RPC框架，基于HTTP2协议，基于protobuf 3.x，基于Netty 4.x。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面写过一篇golang标准库的rpc包的用法，这篇文章接着讲一下go
      
    
    </summary>
    
    
      <category term="golang" scheme="http://andyli.me/tags/golang/"/>
    
      <category term="rpc" scheme="http://andyli.me/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>golang中的rpc包用法</title>
    <link href="http://andyli.me/2017/12/07/golang-rpc/"/>
    <id>http://andyli.me/2017/12/07/golang-rpc/</id>
    <published>2017-12-07T12:28:56.839Z</published>
    <updated>2017-12-08T12:16:10.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>RPC，即 Remote Procedure Call（远程过程调用），说得通俗一点就是：调用远程计算机上的服务，就像调用本地服务一样。</p></blockquote><p>我所在公司的项目是采用基于Restful的微服务架构，随着微服务之间的沟通越来越频繁，就希望可以做成用rpc来做内部的通讯，对外依然用Restful。于是就想到了golang标准库的rpc包和google的grpc。</p><p>这篇文章重点了解一下golang的rpc包。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>golang的rpc支持三个级别的RPC：TCP、HTTP、JSONRPC。但Go的RPC包是独一无二的RPC，它和传统的RPC系统不同，它只支持Go开发的服务器与客户端之间的交互，因为在内部，它们采用了Gob来编码。</p><p>Go RPC的函数只有符合下面的条件才能被远程访问，不然会被忽略，详细的要求如下：</p><ul><li>函数必须是导出的(首字母大写)</li><li>必须有两个导出类型的参数，</li><li>第一个参数是接收的参数，第二个参数是返回给客- 户端的参数，第二个参数必须是指针类型的</li><li>函数还要有一个返回值error</li></ul><p>举个例子，正确的RPC函数格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">MethodName</span><span class="params">(argType T1, replyType *T2)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>T、T1和T2类型必须能被<code>encoding/gob</code>包编解码。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>举一个http的例子。</p><p>下面是http服务器端的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">A, B <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Quotient <span class="keyword">struct</span> &#123;</span><br><span class="line">Quo, Rem <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Arith <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Arith)</span> <span class="title">Multiply</span><span class="params">(args *Args, reply *<span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">*reply = args.A * args.B</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Arith)</span> <span class="title">Divide</span><span class="params">(args *Args, quo *Quotient)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> args.B == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"divide by zero"</span>)</span><br><span class="line">&#125;</span><br><span class="line">quo.Quo = args.A / args.B</span><br><span class="line">quo.Rem = args.A % args.B</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arith := <span class="built_in">new</span>(Arith)</span><br><span class="line">rpc.Register(arith)</span><br><span class="line">rpc.HandleHTTP()</span><br><span class="line">l, e := net.Listen(<span class="string">"tcp"</span>, <span class="string">":1234"</span>)</span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"listen error:"</span>, e)</span><br><span class="line">&#125;</span><br><span class="line">http.Serve(l, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单分析一下上面的例子，先实例化了一个Arith对象arith，然后给arith注册了rpc服务，然后把rpc挂载到http服务上面，当http服务打开的时候我们就可以通过rpc客户端来调用arith中符合rpc标准的的方法了。</p><p>请看客户端的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">A, B <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Quotient <span class="keyword">struct</span> &#123;</span><br><span class="line">Quo, Rem <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">client, err := rpc.DialHTTP(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:1234"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"dialing:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Synchronous call</span></span><br><span class="line">args := &amp;Args&#123;<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">int</span></span><br><span class="line">err = client.Call(<span class="string">"Arith.Multiply"</span>, args, &amp;reply)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"arith error:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Arith: %d*%d=%d\n"</span>, args.A, args.B, reply)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asynchronous call</span></span><br><span class="line">quotient := <span class="built_in">new</span>(Quotient)</span><br><span class="line">divCall := client.Go(<span class="string">"Arith.Divide"</span>, args, quotient, <span class="literal">nil</span>)</span><br><span class="line">replyCall := &lt;-divCall.Done<span class="comment">// will be equal to divCall</span></span><br><span class="line"><span class="keyword">if</span> replyCall.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"arith error:"</span>, replyCall.Error)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Arith: %d/%d=%d...%d"</span>, args.A, args.B, quotient.Quo, quotient.Rem)</span><br><span class="line"><span class="comment">// check errors, print, etc.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单说明下，先用rpc的DialHTTP方法连接服务器端，调用服务器端的函数就要使用Call方法了，Call方法的参数和返回值已经很清晰的表述出rpc整体的调用逻辑了。</p><p>我们把服务器端跑起来，再把客户端跑起来，这时候客户端会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arith: 7*8=56</span><br><span class="line">Arith: 7/8=0...7</span><br></pre></td></tr></table></figure><p>到此，整个rpc的调用逻辑就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;RPC，即 Remote Procedure Call（远程过程调用），说得通俗一点就是：调用远程计算机上的服务，就像调用本地服务一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我所在公司的项目是采用基于Restful的微服务架构，随着微服务之间
      
    
    </summary>
    
    
      <category term="golang" scheme="http://andyli.me/tags/golang/"/>
    
      <category term="rpc" scheme="http://andyli.me/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>nginx多域名配置</title>
    <link href="http://andyli.me/2017/12/07/nginx-lot-of-domain-config/"/>
    <id>http://andyli.me/2017/12/07/nginx-lot-of-domain-config/</id>
    <published>2017-12-07T04:06:07.856Z</published>
    <updated>2017-12-08T12:18:24.708Z</updated>
    
    <content type="html"><![CDATA[<p>nginx多域名配置是在配置文件中建立多个<code>server</code>配置，在每个<code>server</code>配置中用<code>server_name</code>来对域名信息进行过滤。<br>举个例子，下面是一个<code>conf</code>文件：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="attribute">listen</span>  <span class="number">80</span>; </span><br><span class="line"><span class="attribute">server_name</span> www.web1.com;             <span class="comment">#绑定域名 </span></span><br><span class="line"><span class="attribute">index</span> index.htm index.html index.php;  <span class="comment">#默认文件 </span></span><br><span class="line"><span class="attribute">root</span> /home/www.web1.com;              <span class="comment">#网站根目录</span></span><br><span class="line"><span class="attribute">include</span> location.conf;                 <span class="comment">#调用其他规则，也可去除</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="attribute">listen</span>  <span class="number">80</span>; </span><br><span class="line"><span class="attribute">server_name</span> www.web2.com;             <span class="comment">#绑定域名 </span></span><br><span class="line"><span class="attribute">index</span> index.htm index.html index.php;  <span class="comment">#默认文件 </span></span><br><span class="line"><span class="attribute">root</span> /home/www/web2.com;              <span class="comment">#网站根目录</span></span><br><span class="line"><span class="attribute">include</span> location.conf;                 <span class="comment">#调用其他规则，也可去除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置信息就是在一个nginx配置中最简单的多域名配置方法，关于<code>server_name</code>，nginx官方还提供了很多正则匹配的过滤方式，详情请看<a href="http://nginx.org/en/docs/http/server_names.html" target="_blank" rel="noopener">nginx官方文档</a>。</p><p>##注意事项<br>特别要注意的是，在nginx的配置文件中只有一个<code>server</code>配置的时候，<code>server_name</code>是<code>无效</code>的，也就是说任何域名绑定了这个IP的时候，无论<code>server_name</code>填什么域名，都会匹配到这个唯一的<code>server</code>。只有在多个<code>server</code>的时候，<code>server_name</code>才会有效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx多域名配置是在配置文件中建立多个&lt;code&gt;server&lt;/code&gt;配置，在每个&lt;code&gt;server&lt;/code&gt;配置中用&lt;code&gt;server_name&lt;/code&gt;来对域名信息进行过滤。&lt;br&gt;举个例子，下面是一个&lt;code&gt;conf&lt;/code&gt;文件
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://andyli.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】LPeg编程指南</title>
    <link href="http://andyli.me/2017/12/07/lua-lpeg/"/>
    <id>http://andyli.me/2017/12/07/lua-lpeg/</id>
    <published>2017-12-07T04:06:07.855Z</published>
    <updated>2017-12-08T12:17:59.739Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#ex" target="_blank" rel="noopener">http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html</a></p><h4 id="译者序："><a href="#译者序：" class="headerlink" title="译者序："></a>译者序：</h4><p>这个是官方的LPeg的文档。这段时间学习LPeg的时候发现国内关于LPeg的文章很少，所以决定把文档翻译一下。</p><p>翻译的不是很完整，只是常用的一部分，会慢慢的翻译下去，有同学能帮我补全的话就太感谢了。</p><h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><p>LPeg是lua中一个新的模式匹配（pattern-matching）的库，基于 <a href="http://pdos.csail.mit.edu/~baford/packrat/" target="_blank" rel="noopener">Parsing Expression Grammars</a> (PEGs)。本文是一个关于LPeg库的参考手册。关于更详细的文档，请看see <a href="http://www.inf.puc-rio.br/~roberto/docs/peg.pdf" target="_blank" rel="noopener">A Text Pattern-Matching Tool based on Parsing Expression Grammars</a>.，这里有关于实现的更详细的讨论。</p><p>根据 Snobol的传统，LPeg定义patterns作为第一级别对象，也就是说 patterns 可以作为常规的lua变量(represented by userdata)。</p><p>这个库提供了多种方式来创建和组合patterns。通过使用元方法，个别的一些函数可以提供类似中缀运算符或前缀运算符。一方面，相对于一般的正则表达式，LPeg匹配的结果通常更为详细。另一方面，第一级别的patterns可以更好的描写和扩展正则关系，我们可以定义函数来创建和组合patterns。</p><table><thead><tr><th>Operator</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-p" target="_blank" rel="noopener"><code>lpeg.P(string)</code></a></td><td style="text-align:center">匹配字符串</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-p" target="_blank" rel="noopener"><code>lpeg.P(n)</code></a></td><td style="text-align:center">匹配n个字符串</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-s" target="_blank" rel="noopener"><code>lpeg.S(string)</code></a></td><td style="text-align:center">匹配字符串中任意一个字符 (Set)</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-r" target="_blank" rel="noopener"><code>lpeg.R(&quot;xy&quot;)</code></a></td><td style="text-align:center">匹配x和y之间的任意一个字符(Range)</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-pow" target="_blank" rel="noopener"><code>patt^n</code></a></td><td style="text-align:center"><code>匹配至少n个``patt</code></td><td></td><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-pow" target="_blank" rel="noopener"><code>patt^-n</code></a></td><td><code>匹配最多n个``patt</code></td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-mul" target="_blank" rel="noopener"><code>patt1 * patt2</code></a></td><td style="text-align:center">先匹配<code>patt1</code> 然后接着匹配 <code>patt2</code></td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-add" target="_blank" rel="noopener"><code>patt1 + patt2</code></a></td><td style="text-align:center">匹配满足<code>patt1</code> 或者满足<code>patt2</code> (二选一)</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-sub" target="_blank" rel="noopener"><code>patt1 - patt2</code></a></td><td style="text-align:center">匹配满足patt1而且不满足patt2</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-unm" target="_blank" rel="noopener"><code>-patt</code></a></td><td style="text-align:center">和 <code>(&quot;&quot; - patt)一样</code></td><td></td><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-len" target="_blank" rel="noopener"><code>#patt</code></a></td><td>Matches <code>patt</code> but consumes no input</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-behind" target="_blank" rel="noopener"><code>lpeg.B(patt)</code></a></td><td style="text-align:center">Matches <code>patt</code> behind the current position, consuming no input</td></tr></tbody></table><p>举一个很简单的例子， lpeg.R(“09”)^1创建了一个pattern，这个pattern的作用是匹配一个非空的数字序列。再举一个稍微复杂一点的例子，-lpeg.P(1)匹配一个不能有任何字符的空字符串，这个通常用在匹配规则的最后。</p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><h4 id="lpeg-match-pattern-subject-init"><a href="#lpeg-match-pattern-subject-init" class="headerlink" title="lpeg.match (pattern, subject [, init])"></a>lpeg.match (pattern, subject [, init])</h4><p>匹配函数。它试图通过一个给定的pattern来对目标字符串进行匹配。如果匹配成功， 则返回匹配成功子串的第一个字符的位置，或者返回捕获的值（如果成功捕获到值的话）。</p><p>一个可选的数字参数 init 作为匹配目标字符串的起始位置。和通常的Lua库一样，如果参数是一个负数，则从目标字符串的最后一个字符开始向前计算，得到起始位置。</p><p>和典型的匹配函数不同， match 仅仅在一个固定的模式下工作； 也就是说，它试着从目标字符串的前缀字符开始匹配，而不是匹配任意的子串。.所以，如果我们想匹配一个任意位置的子串，就必须用Lua写一个循环来把目标字符串的每一个位置作为起始位置匹配，或者写一个pattern来匹配任意字符。两种方法对比来说，第二种非常方便、快捷和高效，可以以看看下面的例子。</p><h4 id="lpeg-type-value"><a href="#lpeg-type-value" class="headerlink" title="lpeg.type (value)"></a>lpeg.type (value)</h4><p>如果value是一个pattern，则返回一个字符串 “pattern”.，否则返回nil。</p><h4 id="lpeg-version"><a href="#lpeg-version" class="headerlink" title="lpeg.version ()"></a>lpeg.version ()</h4><p>返回LPeg的字符串版本号。</p><h4 id="lpeg-setmaxstack-max"><a href="#lpeg-setmaxstack-max" class="headerlink" title="lpeg.setmaxstack (max)"></a>lpeg.setmaxstack (max)</h4><p>设置堆栈的上限，默认是400。</p><h3 id="Basic-Constructions"><a href="#Basic-Constructions" class="headerlink" title="Basic Constructions"></a>Basic Constructions</h3><p>####lpeg.P (value)</p><p>用下面的规则将一个给定的值转换成一个合适的pattern：</p><ul><li>如果参数是一个pattern，则返回参数pattern。 </li><li>如果参数是一个string，则返回匹配这个字符串的pattern。 </li><li>如果参数是一个非负整数 <em>n</em>, 则返回一个匹配正好是n个字符的字符串的pattern。 </li><li>如果参数是一个负整数 <em>-n</em>, 则只有在输入的字符串还剩下不到n个字符才会成。 lpeg.P(-n) 等同于 -lpeg.P(n) (see the <strong><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-unm" target="_blank" rel="noopener">unary minus operation</a></strong>). </li><li>如果参数是一个 boolean, the result is a pattern that always succeeds or always fails (according to the boolean value), without consuming any input. </li><li>如果参数是一个table, 则被解读为一个grammar (see <strong><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#grammar" target="_blank" rel="noopener">Grammars</a></strong>)。 </li><li>如果参数是一个function, 则返回一个pattern，等价于一个 <strong><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#matchtime" target="_blank" rel="noopener">match-time capture</a></strong> 用一个空字符串匹配.</li></ul><h4 id="lpeg-B-patt"><a href="#lpeg-B-patt" class="headerlink" title="lpeg.B(patt)"></a>lpeg.B(patt)</h4><p>Returns a pattern that matches only if the input string at the current position is preceded by patt. Pattern patt must match only strings with some fixed length, and it cannot contain captures.<br>Like the <strong><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#op-len" target="_blank" rel="noopener">and predicate</a></strong>, this pattern never consumes any input, independently of success or failure.</p><h4 id="lpeg-R-range"><a href="#lpeg-R-range" class="headerlink" title="lpeg.R ({range})"></a>lpeg.R ({range})</h4><p>返回一个在给定的范围内任何一个字符。范围是一个长度为2的字符串xy，返回的所有字符都是x和y对应ASCII编码之间（包括x和y）。<br> 举个例子， pattern lpeg.R(“09”) 匹配所有的数字，lpeg.R(“az”, “AZ”) 匹配所有的ASCII字母。</p><h4 id="lpeg-S-string"><a href="#lpeg-S-string" class="headerlink" title="lpeg.S (string)"></a>lpeg.S (string)</h4><p>返回一个pattern匹配一个字符，这个字符是给定的string中的任何一个字符。 (The S stands for <em>Set</em>.)</p><p>举个例子， pattern lpeg.S(“+-*/“) 匹配任何一个算术运算符。</p><p>注意， 如果s是一个字符，那么 lpeg.P(s) 等价于 lpeg.S(s)。</p><h4 id="lpeg-V-v"><a href="#lpeg-V-v" class="headerlink" title="lpeg.V (v)"></a>lpeg.V (v)</h4><p>This operation creates a non-terminal (a <em>variable</em>) for a grammar. The created non-terminal refers to the rule indexed by v in the enclosing grammar. (See <strong><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#grammar" target="_blank" rel="noopener">Grammars</a></strong> for details.)<br><strong>lpeg.locale ([table])</strong><br>Returns a table with patterns for matching some character classes according to the current locale. The table has fields named alnum, alpha, cntrl, digit, graph, lower, print, punct, space, upper, and xdigit, each one containing a correspondent pattern. Each pattern matches any single character that belongs to its class.<br>If called with an argument table, then it creates those fields inside the given table and returns that table.</p><h4 id="patt"><a href="#patt" class="headerlink" title="#patt"></a>#patt</h4><p>Returns a pattern that matches only if the input string matches patt, but without consuming any input, independently of success or failure. (This pattern is called an <em>and predicate</em> and it is equivalent to <em>&amp;patt</em> in the original PEG notation.)<br>This pattern never produces any capture.</p><h4 id="patt-1"><a href="#patt-1" class="headerlink" title="-patt"></a>-patt</h4><p>返回一个pattern，这个pattern要求输入的字符串不匹配patt。 它不消耗任何的输入，只是成功或者失败。 (This pattern is equivalent to <em>!patt</em> in the original PEG notation.)<br>举个例子，pattern -lpeg.P(1) 匹配字符串的末尾。</p><p>这个pattern 从来不产生任何捕获，因为不是 patt失败就是 -patt 失败。 (一个失败的 pattern 从来不产生任何捕获 )</p><h4 id="patt1-patt2"><a href="#patt1-patt2" class="headerlink" title="patt1 + patt2"></a>patt1 + patt2</h4><p>返回一个符合 patt1 或者 patt2的pattern。<br>如果 patt1 和 patt2 都是字符集合, 则得到的结果是两个的并集。<br>lower = lpeg.R(“az”)<br>upper = lpeg.R(“AZ”)<br>letter = lower + upper</p><h4 id="patt1-patt2-1"><a href="#patt1-patt2-1" class="headerlink" title="patt1 - patt2"></a>patt1 - patt2</h4><p>相当于 <em>!patt2 patt1</em>。 这个pattern 意思是不匹配 patt2 且匹配 patt1。<br>如果成功了，则最后捕获到的是patt1的内容。这个pattern不会从patt2中捕获任何信息 (as either patt2 fails or patt1 - patt2 fails).<br>如果 patt1 和 patt2 都是字符集合，那么这个运算就相当于集合差。 注意 -patt等价于 “” - patt (or 0 - patt). 如果 patt 是一个字符集合， 1 - patt是它的补集。</p><h4 id="patt1-patt2-2"><a href="#patt1-patt2-2" class="headerlink" title="patt1 * patt2"></a>patt1 * patt2</h4><p>返回一个pattern，这个pattern先匹配patt1，patt1匹配完成之后，从匹配完成的下一个字符开始匹配patt2。 The identity element for this operation is the pattern lpeg.P(true), which always succeeds.<br>     (LPeg uses the * operator [instead of the more obvious ..] both because it has the right priority and because in formal languages it is common to use a dot for denoting concatenation.)</p><h4 id="patt-n"><a href="#patt-n" class="headerlink" title="patt^n"></a>patt^n</h4><p>如果 n 是一个非负数， 这个pattern等价于 <em>patt<strong>n</strong> patt*</em>。它匹配的条件是至少n个 patt。<br>另外， 如果n 是负数， 这个 pattern 等价于 <em>(patt?)__-n</em>: 它匹配的条件是最多 |n| 个 patt。<br>在个别情况下， 在原始的 PEG 中 ，patt^0 等价于 <em>patt*</em>, patt^1 等价于 <em>patt+，</em> patt^-1 等价于 <em>patt?</em>。<br>在所有的情况下， the resulting pattern is greedy with no backtracking (also called a <em>possessive</em> repetition).注意，patt^n只会匹配最长的序列。</p><h4 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h4><p>在lua的环境下，可以自定义一些patterns，让新定义的pattern可以使用已经定义过的旧的pattern，然而，这些技巧不允许定义循环的patterns。 For recursive patterns, we need real grammars.<br>LPeg通过使用table来定义gramar， table的每个条目是一条规则。</p><h4 id="Captures"><a href="#Captures" class="headerlink" title="Captures"></a>Captures</h4><p><em>capture</em> 是一个pattern匹配成功之后捕获的值。 LPeg提供多种捕获方式， 基于pattern的匹配和组合来产生不同的捕获值。<br>下面是捕获的基本概述：</p><table><thead><tr><th><strong>Operation</strong></th><th style="text-align:center"><strong>What it Produces</strong></th></tr></thead><tbody><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-c" target="_blank" rel="noopener"><code>lpeg.C(patt)</code></a></td><td style="text-align:center">所有pattern捕获的子串</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-arg" target="_blank" rel="noopener"><code>lpeg.Carg(n)</code></a></td><td style="text-align:center">the value of the nth extra argument to <code>lpeg.match</code> (matches the empty string)</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-b" target="_blank" rel="noopener"><code>lpeg.Cb(name)</code></a></td><td style="text-align:center">the values produced by the previous group capture named <code>name</code> (matches the empty string)</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-cc" target="_blank" rel="noopener"><code>lpeg.Cc(values)</code></a></td><td style="text-align:center">the given values (matches the empty string)</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-f" target="_blank" rel="noopener"><code>lpeg.Cf(patt, func)</code></a></td><td style="text-align:center">捕获的结果将作为参数依次被func调用</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-g" target="_blank" rel="noopener"><code>lpeg.Cg(patt [, name])</code></a></td><td style="text-align:center">把patt所有的返回值作为一个返回值并指定一个名字</td><td></td><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-p" target="_blank" rel="noopener"><code>lpeg.Cp()</code></a></td><td>捕获的位置</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-s" target="_blank" rel="noopener"><code>lpeg.Cs(patt)</code></a></td><td style="text-align:center">创建一个替代捕获</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-t" target="_blank" rel="noopener"><code>lpeg.Ct(patt)</code></a></td><td style="text-align:center">把patt中所有的返回值按照父子关系放到一个数组里返回</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-string" target="_blank" rel="noopener"><code>patt / string</code></a></td><td style="text-align:center"><code>string</code>, with some marks replaced by captures of <code>patt</code></td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-num" target="_blank" rel="noopener"><code>patt / number</code></a></td><td style="text-align:center">the n-th value captured by <code>patt</code>, or no value when <code>number</code> is zero.</td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-query" target="_blank" rel="noopener"><code>patt / table</code></a></td><td style="text-align:center"><code>table[c]</code>, where <code>c</code> is the (first) capture of <code>patt</code></td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-func" target="_blank" rel="noopener"><code>patt / function</code></a></td><td style="text-align:center">the returns of <code>function</code> applied to the captures of <code>patt</code></td></tr><tr><td><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#matchtime" target="_blank" rel="noopener"><code>lpeg.Cmt(patt, function)</code></a></td><td style="text-align:center">the returns of <code>function</code> applied to the captures of <code>patt</code>; the application is done at match time</td></tr></tbody></table><h4 id="lpeg-C-patt"><a href="#lpeg-C-patt" class="headerlink" title="lpeg.C (patt)"></a>lpeg.C (patt)</h4><p>返回匹配到的子字符串以及patt内部子patt的返回值。</p><h4 id="lpeg-Carg-n"><a href="#lpeg-Carg-n" class="headerlink" title="lpeg.Carg (n)"></a>lpeg.Carg (n)</h4><p>Creates an <em>argument capture</em>. This pattern matches the empty string and produces the value given as the nth extra argument given in the call to lpeg.match.</p><h4 id="lpeg-Cb-name"><a href="#lpeg-Cb-name" class="headerlink" title="lpeg.Cb (name)"></a>lpeg.Cb (name)</h4><p>Creates a <em>back capture</em>. This pattern matches the empty string and produces the values produced by the <em>most recent</em> <strong><a href="http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#cap-g" target="_blank" rel="noopener">group capture</a></strong> named name (where name can be any Lua value).<br><em>Most recent</em> means the last <em>complete</em> <em>outermost</em> group capture with the given name. A <em>Complete</em> capture means that the entire pattern corresponding to the capture has matched. An <em>Outermost</em> capture means that the capture is not inside another complete capture.</p><h4 id="lpeg-Cc-value-…"><a href="#lpeg-Cc-value-…" class="headerlink" title="lpeg.Cc ([value, …])"></a>lpeg.Cc ([value, …])</h4><p>Creates a <em>constant capture</em>. This pattern matches the empty string and produces all given values as its captured values.</p><h4 id="lpeg-Cf-patt-func"><a href="#lpeg-Cf-patt-func" class="headerlink" title="lpeg.Cf (patt, func)"></a>lpeg.Cf (patt, func)</h4><p>创建一个折叠的捕获，假设patt有n个返回值,C1,C2,C3,那么Cf返回 f(f( f(C1),C2), C3)。<br>举个例子，一个用逗号隔开的数字序列，计算出数字串中每个数字相加的结果：<br>– matches a numeral and captures its numerical value<br>number = lpeg.R”09”^1 / tonumber</p><p>– matches a list of numbers, capturing their values<br>list = number <em> (“,” </em> number)^0</p><p>– auxiliary function to add two numbers<br>function add (acc, newvalue) return acc + newvalue end</p><p>– folds the list of numbers adding them<br>sum = lpeg.Cf(list, add) – example of use<br>print(sum:match(“10,30,43”))  –&gt; 83</p><h4 id="lpeg-Cg-patt-name"><a href="#lpeg-Cg-patt-name" class="headerlink" title="lpeg.Cg (patt [, name])"></a>lpeg.Cg (patt [, name])</h4><p>创建一个捕获的集合，这组返回的所有值型成一个捕获。集合可能是匿名(如果没有名字)或命名的(可以是任何非nil值Lua值)。</p><h4 id="lpeg-Cp"><a href="#lpeg-Cp" class="headerlink" title="lpeg.Cp ()"></a>lpeg.Cp ()</h4><p>Creates a <em>position capture</em>. It matches the empty string and captures the position in the subject where the match occurs. The captured value is a number.</p><h4 id="lpeg-Cs-patt"><a href="#lpeg-Cs-patt" class="headerlink" title="lpeg.Cs (patt)"></a>lpeg.Cs (patt)</h4><p>Creates a <em>substitution capture</em>, which captures the substring of the subject that matches patt, with <em>substitutions</em>. For any capture inside patt with a value, the substring that matched the capture is replaced by the capture value (which should be a string). The final captured value is the string resulting from all replacements.</p><h4 id="lpeg-Ct-patt"><a href="#lpeg-Ct-patt" class="headerlink" title="lpeg.Ct (patt)"></a>lpeg.Ct (patt)</h4><p>创建一个捕获的数组。  创建一个表捕获;这个捕获将创建一个表,将匿名的捕获保存到表中,索引从1开始.对于命名组捕获,以组名为key。<br><strong>注：下面的内容由于开源中国已经翻译完成故不再翻译</strong><a href="http://www.oschina.net/translate/lpeg-syntax" target="_blank" rel="noopener">http://www.oschina.net/translate/lpeg-syntax</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html#ex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.inf.puc-rio.br/~roberto/lpeg/
      
    
    </summary>
    
    
      <category term="lua" scheme="http://andyli.me/tags/lua/"/>
    
      <category term="lpeg" scheme="http://andyli.me/tags/lpeg/"/>
    
  </entry>
  
  <entry>
    <title>lua和c的亲密接触</title>
    <link href="http://andyli.me/2017/12/07/lua-and-c/"/>
    <id>http://andyli.me/2017/12/07/lua-and-c/</id>
    <published>2017-12-07T04:06:07.855Z</published>
    <updated>2017-12-08T12:17:33.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>lua和c的亲密接触，靠的是一个虚拟栈。lua通过这个虚拟栈来实现和c之间值的互传。栈上的每一个元素是一个lua值（nil，number，string…）。</p></blockquote><p>当lua调用c函数的时候，这个函数会得到一个新的栈，这个栈独立于c函数本身的栈，也独立于lua自己的栈。它里面包含了lua要传给c的所有参数，然后c函数会把返回的结果放入这个栈中返回给调用者。<br>对于栈的查询操作，如果按照栈的规则，只能拿到栈顶的元素。但这里和常规的栈有一些差异。就是可以用一个索引来指向栈上的任何元素。正数的索引<code>（1...n）</code>指向从栈底到栈顶元素，<code>1</code>就是最先入栈的元素，<code>n</code>就是栈顶的元素，负数的索引<code>（-1...-n）</code>指向从栈顶到栈底的元素，<code>-1</code>就是栈顶元素，<code>-n</code>就是最先入栈的元素。通过这两种索引方式可以很方便的获取栈中的元素。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>lua和c之间的交互的桥梁是一个虚拟栈，这个虚拟栈在lua的c api中为<code>lua_State</code>，下面的代码展示了从创建栈，元素入栈，根据索引获取栈中元素的值的过程，这也是<code>lua_State</code>的最基本的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lua_State *L = luaL_newstate();<span class="comment">//创建一个新的栈</span></span><br><span class="line"></span><br><span class="line">lua_pushstring(L, <span class="string">"muzixiaoxin"</span>); <span class="comment">//把一个字符串压入栈</span></span><br><span class="line">lua_pushnumber(L, <span class="number">875</span>);<span class="comment">//把一个整型压入栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在栈内有两个元素，栈底是字符串"muzixiaoxin"，栈顶是整型875</span></span><br><span class="line"><span class="comment">//"muzixiaoxin"的索引就是1，或者-2</span></span><br><span class="line"><span class="comment">//855的索引就是2，或者-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lua_isstring(L, <span class="number">1</span>))&#123;<span class="comment">//判断栈底的元素是不是字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,lua_tostring(L, <span class="number">1</span>));<span class="comment">//如果是字符串就转换成字符串输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lua_isnumber(L, <span class="number">-1</span>))&#123;<span class="comment">//判断栈顶元素是不是number类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, lua_tonumber(L, <span class="number">2</span>));<span class="comment">//如果是就转换成number类型输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lua_close(L); <span class="comment">//记得不需要的时候要释放掉</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：更多的相关函数请参考<a href="http://cloudwu.github.io/lua53doc/manual.html" target="_blank" rel="noopener">lua中文手册</a></p></blockquote><h2 id="c调用lua"><a href="#c调用lua" class="headerlink" title="c调用lua"></a>c调用lua</h2><p>c调用lua这种情况我见到的比较少，一般都是用lua虚拟机直接跑脚本。也有一些把lua作为配置文件给c用的。<br>举个例子，新建一个lua文件test.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"muzixiaoxin"</span></span><br><span class="line">version = <span class="number">1003</span></span><br></pre></td></tr></table></figure><p>c需要通过lua c api把这个文件加载进来，然后执行，执行的结果存在一个栈中， 去这个栈中拿到变量的值。<br>看下面的c代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lua_State *L = luaL_newstate();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> err = luaL_loadfile(L, <span class="string">"test.lua"</span>); <span class="comment">//把lua文件加载成代码块，只加载不运行</span></span><br><span class="line"><span class="keyword">if</span> (err)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = lua_pcall(L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//运行加载的代码块</span></span><br><span class="line"><span class="keyword">if</span> (err)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lua_getglobal(L, <span class="string">"name"</span>); <span class="comment">//把全局变量name的值压入栈顶</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, lua_tostring(L, <span class="number">-1</span>));<span class="comment">//取出栈顶元素打印结果为:muzixiaoxin</span></span><br><span class="line"></span><br><span class="line">lua_close(L); <span class="comment">//记得不需要的时候要释放掉</span></span><br></pre></td></tr></table></figure><h2 id="lua调用c方法"><a href="#lua调用c方法" class="headerlink" title="lua调用c方法"></a>lua调用c方法</h2><p>lua调用c有些麻烦，要写一个固定格式的方法来供lua调用。<br>我们先简单的写个求和的c方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算求和的方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">sum(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法就是求两个整型的和。我们要让lua使用这个方法，就要先把这个方法注册给lua的状态机，但注册给lua状态机的方法要求有固定的参数和固定的返回值，参数要是一个<code>lua虚拟栈</code>，这个虚拟栈存放着lua传过来的参数，lua调用的返回值也要通过这个虚拟栈返回给lua，最后的返回值要求是一个<code>int值</code>，存着返回给lua变量的个数。我们看写好的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lua调用的方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">lsum(lua_State *L)&#123;</span><br><span class="line">    <span class="keyword">int</span> a = (<span class="keyword">int</span>)lua_tonumber(L, <span class="number">-1</span>);<span class="comment">//lua调用的参数之一</span></span><br><span class="line">    <span class="keyword">int</span> b = (<span class="keyword">int</span>)lua_tonumber(L, <span class="number">-2</span>);<span class="comment">//lua调用的参数之一</span></span><br><span class="line">    lua_pushnumber(L, sum(a, b));<span class="comment">//把计算的加过压栈</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//返回返回值的个数</span></span><br><span class="line">&#125;</span><br><span class="line">下一步是吧lsum这个方法注册给lua状态机：</span><br><span class="line">lua_State *L = luaL_newstate();</span><br><span class="line"></span><br><span class="line">luaL_openlibs(L);<span class="comment">//打开L中的所有标准库，这样就可以使用print方法</span></span><br><span class="line"></span><br><span class="line">lua_register(L, <span class="string">"sum"</span>, lsum);<span class="comment">//把c函数lsum注册为lua的一个全局变量sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> err = luaL_dofile(L, <span class="string">"test.lua"</span>); <span class="comment">//把lua文件加载成代码块，并运行</span></span><br><span class="line"><span class="keyword">if</span> (err)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lua_close(L);</span><br></pre></td></tr></table></figure><p>test.lua的内容是：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"1 + 2 = "</span> .. sum(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>最后的输出结果：<br><img src="http://images2015.cnblogs.com/blog/229056/201601/229056-20160115173124225-858704453.png" alt="image"></p><p>总结一下，就是，你要通过一个中间函数（像lsum这种）对lua虚拟栈进行操作来实现lua调用c的方法。</p><blockquote><p>提示：更多的lua c api请参考<a href="http://cloudwu.github.io/lua53doc/manual.html" target="_blank" rel="noopener">lua中文手册</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;lua和c的亲密接触，靠的是一个虚拟栈。lua通过这个虚拟栈来实现和c之间值的互传。栈上的每一个元素是一个lua值
      
    
    </summary>
    
    
      <category term="lua" scheme="http://andyli.me/tags/lua/"/>
    
      <category term="c" scheme="http://andyli.me/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>homebrew常用命令</title>
    <link href="http://andyli.me/2017/12/07/homebrew-commond/"/>
    <id>http://andyli.me/2017/12/07/homebrew-commond/</id>
    <published>2017-12-07T04:06:07.854Z</published>
    <updated>2017-12-08T12:16:40.713Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/Go/install)&quot;</span><br></pre></td></tr></table></figure><ul><li>搜索</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search XXX</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info XXX</span><br></pre></td></tr></table></figure><ul><li>更新自己</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><ul><li>是否有新版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><p>列出所有安装的软件里可以升级的软件</p><ul><li>升级软件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade</span><br></pre></td></tr></table></figure><p>升级所有可以升级的软件们</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade XXX</span><br></pre></td></tr></table></figure><p>升级某个软件</p><ul><li>清理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup</span><br></pre></td></tr></table></figure><p>清理不需要的版本极其安装包缓存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="homebrew" scheme="http://andyli.me/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>使用hugo和docker打造静态博客解决方案</title>
    <link href="http://andyli.me/2017/12/07/hugo-docker-environment/"/>
    <id>http://andyli.me/2017/12/07/hugo-docker-environment/</id>
    <published>2017-12-07T04:06:07.854Z</published>
    <updated>2017-12-08T12:17:12.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年是转型的一年，告别了游戏行业，开始使用golang做起了web应用。golang用到现在三个多月了，整体体验下来还是很不错的，接近C的性能、天生拥有的高并发能力、简洁的语法以及相对C/C++而言简化的指针，使得这门语言在开发效率和运行效率两方面都有着不错的表现。相对于C语言而言，golang有着接近于python的快速开发和快速迭代的能力，而相对于python来说，golang有着更好的性能和更强大的并发能力。相信随着开源社区的不断壮大，golang会慢慢的流行起来。</p><p><a href="http://gohugo.io/" target="_blank" rel="noopener">hugo</a>是一个静态博客的生成工具，和<a href="http://hexo.io/" target="_blank" rel="noopener">hexo</a>类似。因为hugo是用golang写的，在github上面有着一万多的star数量，所以我建立独立博客的时候选择了hugo而不是hexo来作为静态博客的engine。</p><p><a href="https://www.docker.com/" target="_blank" rel="noopener">docker</a>是PaaS提供商dotCloud开源的一个基于LXC的高级容器引擎，源代码托管在Github上,基于go语言。这个概念最近比较火，所以我就抽空学习了一下docker并用它作为我的个人博客<a href="http://blog.andyli.me" target="_blank" rel="noopener">blog.andyli.me</a>的部署方案。大致介绍下部署的方案，我一共用到了两个docker容器，一个容器跑nginx，另一个跑hugo生成静态页面，两个docker容器跑在一个<code>cent os</code>的vps上面。</p><h2 id="一、hugo的安装"><a href="#一、hugo的安装" class="headerlink" title="一、hugo的安装"></a>一、hugo的安装</h2><p>hugo是用golang写的，支持多平台。</p><p>可直接参考<a href="http://www.gohugo.org/" target="_blank" rel="noopener">hugo中文文档</a>。</p><h3 id="1-Mac-OS"><a href="#1-Mac-OS" class="headerlink" title="1.Mac OS"></a>1.Mac OS</h3><p>mac上可以使用<a href="http://brew.sh/" target="_blank" rel="noopener">HomeBrew</a>安装hugo，非常简单， 只需要执行下面这句命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew install hugo</span><br></pre></td></tr></table></figure><h3 id="2-Linux"><a href="#2-Linux" class="headerlink" title="2.Linux"></a>2.Linux</h3><p>linux安装也比较简单，因为hugo的环境就是一个二进制包，没有依赖，所以直接下载下来，放到<code>usr/local/bin</code>中就可以了</p><p>1.去网站<a href="https://github.com/spf13/hugo/releases" target="_blank" rel="noopener">https://github.com/spf13/hugo/releases</a>下载对应的包，比如hugo_x.xx_linux-64bit.tgz。</p><p>2.解压缩后将二进制文件改名为<code>hugo</code></p><p>3.将这个二进制文件移动到<code>usr/local/bin</code>目录中</p><h3 id="3-Windows"><a href="#3-Windows" class="headerlink" title="3.Windows"></a>3.Windows</h3><p>hugo在windows下面是一个.exe文件，也是没有依赖的。</p><p>1.去网站<a href="https://github.com/spf13/hugo/releases" target="_blank" rel="noopener">https://github.com/spf13/hugo/releases</a>下载对应的包，比如hugo_x.xx_linux-64bit.tgz。</p><p>2.解压缩后得到<code>hugo.exe</code>文件</p><p>3.在<code>C:\</code>中创建文件夹<code>C:\hugo</code>，将<code>hugo.exe</code>移动到<code>C:\hugo</code>中</p><p>4.把目录<code>C:\hugo</code>添加到环境变量<code>PATH</code>中</p><h3 id="4-源码安装"><a href="#4-源码安装" class="headerlink" title="4.源码安装"></a>4.源码安装</h3><p>1.安装<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>和<a href="https://golang.org/" target="_blank" rel="noopener">go </a>1.5+</p><p>2.<code>export GOPATH=$HOME/go</code></p><p>3.<code>go get -v github.com/spf13/hugo</code></p><p>4.将目录<code>$HOME/go/bin</code>添加到环境变量<code>PATH</code>中</p><h3 id="5-检查安装是否成功"><a href="#5-检查安装是否成功" class="headerlink" title="5.检查安装是否成功"></a>5.检查安装是否成功</h3><p>在命令行下执行hugo命令，如果得到类似下面结果，则说明你已经成功安装了Hugo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hugo version</span><br><span class="line">Hugo Static Site Generator v0.15-DEV BuildDate: 2015-09-20T23:53:39+08:00</span><br></pre></td></tr></table></figure><h2 id="二、hugo的使用"><a href="#二、hugo的使用" class="headerlink" title="二、hugo的使用"></a>二、hugo的使用</h2><p>hugo安装好之后，我们看看怎么来快速的使用它。</p><h3 id="1-创建站点"><a href="#1-创建站点" class="headerlink" title="1.创建站点"></a>1.创建站点</h3><p>使用下面命令在当前目录下创建一个站点<code>bookshelf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hugo new site bookshelf</span><br></pre></td></tr></table></figure><p>然后进入创建好的目录<code>bookshelf</code>中，执行一下<code>tree -a</code>看到目录结构是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- archetypes</span><br><span class="line">|-- config.toml</span><br><span class="line">|-- content</span><br><span class="line">|-- data</span><br><span class="line">|-- layouts</span><br><span class="line">`-- static</span><br><span class="line"></span><br><span class="line">5 directories, 1 file</span><br></pre></td></tr></table></figure><h3 id="2-新增博客内容"><a href="#2-新增博客内容" class="headerlink" title="2.新增博客内容"></a>2.新增博客内容</h3><p>执行下面命令创建一篇博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hugo new post/good-to-great.md</span><br></pre></td></tr></table></figure><p>创建成功会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/shekhargulati/bookshelf/content/post/good-to-great.md created</span><br></pre></td></tr></table></figure><p>创建好的文件位于content中，congtent目录结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">content</span><br><span class="line">`-- post</span><br><span class="line">    `-- good-to-great.md</span><br><span class="line"></span><br><span class="line">1 directory, 1 file</span><br></pre></td></tr></table></figure><h3 id="3-运行博客"><a href="#3-运行博客" class="headerlink" title="3.运行博客"></a>3.运行博客</h3><p>运行如下命令来启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hugo server</span><br></pre></td></tr></table></figure><p>启动成功会显示如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 of 1 draft rendered</span><br><span class="line">0 future content</span><br><span class="line">0 pages created</span><br><span class="line">0 paginator pages created</span><br><span class="line">0 tags created</span><br><span class="line">0 categories created</span><br><span class="line">in 9 ms</span><br><span class="line">Watching for changes in /Users/shekhargulati/bookshelf/&#123;data,content,layouts,static&#125;</span><br><span class="line">Serving pages from memory</span><br><span class="line">Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)</span><br><span class="line">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure><p>打开站点<a href="http://localhost:1313/" target="_blank" rel="noopener">http://localhost:1313/</a>访问你的博客。</p><h3 id="4-选择皮肤"><a href="#4-选择皮肤" class="headerlink" title="4.选择皮肤"></a>4.选择皮肤</h3><p>去站点<a href="http://themes.gohugo.io/" target="_blank" rel="noopener">http://themes.gohugo.io/</a>选择适合你的皮肤。</p><h2 id="三、使用Docker部署"><a href="#三、使用Docker部署" class="headerlink" title="三、使用Docker部署"></a>三、使用Docker部署</h2><p>我使用了两个镜像来部署，一个镜像部署博客生成静态文件，另一个镜像运行nginx。</p><h3 id="1-部署博客"><a href="#1-部署博客" class="headerlink" title="1.部署博客"></a>1.部署博客</h3><p>首先看一下静态文件镜像的dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install --no-install-recommends -y \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    mercurial \</span><br><span class="line">    git-core</span><br><span class="line"></span><br><span class="line">RUN curl -s https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz | tar -v -C /usr/local -xz</span><br><span class="line"></span><br><span class="line">ENV GOPATH /go</span><br><span class="line">ENV GOROOT /usr/local/go</span><br><span class="line">ENV PATH $PATH:/usr/local/go/bin:/go/bin</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install --no-install-recommends -y bzr</span><br><span class="line"></span><br><span class="line">RUN go get github.com/spf13/hugo</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/andyidea/blog.andyli.me.git /blog</span><br><span class="line"></span><br><span class="line">RUN cd /blog &amp;&amp; git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line">WORKDIR /blog</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;/var/www/blog&quot;]</span><br><span class="line"></span><br><span class="line">CMD [&quot;sh&quot;, &quot;run.sh&quot;]</span><br></pre></td></tr></table></figure><p>dockerfile写好之后，我们就可以创建镜像了。</p><p>把dockerfile放到服务器上，然后运行<code>docker build</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t blog .</span><br></pre></td></tr></table></figure><p>执行完后，就创建了名字叫blog的镜像，接下来我们根据生成的镜像来生成容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name blog blog</span><br></pre></td></tr></table></figure><p>这个命令的意思是，根据镜像blog生成一个名字叫做blog的容器。使用<code>docker ps</code>就可以看到正在运行的容器了。</p><p>运行到这一步说明静态的博客文件已经生成，下一步让nginx作为静态博客的server。</p><h3 id="2-部署nginx"><a href="#2-部署nginx" class="headerlink" title="2.部署nginx"></a>2.部署nginx</h3><p>Nginx的dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">ADD nginx/ /etc/nginx</span><br></pre></td></tr></table></figure><p>dockerfile很简单，ADD这步操作是为了把config文件放到nginx中，具体可参考demo<a href="https://github.com/andyidea/dockerfile/tree/master/nginx" target="_blank" rel="noopener">https://github.com/andyidea/dockerfile/tree/master/nginx</a></p><p>同样的，我们把dockerfile放到服务器上并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx .</span><br></pre></td></tr></table></figure><p>镜像生成好后，生成容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 -d --name nginx --volumes-from blog nginx</span><br></pre></td></tr></table></figure><p>这个命令的意思是，使用镜像nginx生成一个容器，将宿主机80端口映射到docker容器中的80端口，-d是运行在后台，–volumes-from 是使用blog容器的卷，也就是blog dockerfile中的<code>VOLUME [&quot;/var/www/blog&quot;]</code>命令。</p><p>至此，博客的部署完毕。</p><h3 id="3-更新博客"><a href="#3-更新博客" class="headerlink" title="3.更新博客"></a>3.更新博客</h3><p>使用下面的命令来更新博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart blog</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今年是转型的一年，告别了游戏行业，开始使用golang做起了web应用。golang用到现在三个多月了，整体体验下来还是很不错的，接近C的性
      
    
    </summary>
    
    
      <category term="hugo" scheme="http://andyli.me/tags/hugo/"/>
    
      <category term="docker" scheme="http://andyli.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>golang中的reflect包用法</title>
    <link href="http://andyli.me/2017/12/07/golang-reflect/"/>
    <id>http://andyli.me/2017/12/07/golang-reflect/</id>
    <published>2017-12-07T04:06:07.853Z</published>
    <updated>2017-12-08T12:15:55.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在写一个自动生成api文档的功能，用到了reflect包来给结构体赋值，给空数组新增一个元素，这样只要定义一个input结构体和一个output的结构体，并填写一些相关tag信息，就能使用程序来生成输入和输出的相关文档。</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>reflect包是golang中很重要的一个包,实现了在运行时允许程序操纵任意类型对象的功能。可以看下<a href="https://golang.org/pkg/reflect/" target="_blank" rel="noopener">文档</a>简单了解一下。</p><p>在reflect中,最重要的是Value类,只有先获取到一个对象或者变量的Value对象后,我们才可以对这个对象或者变量进行更进一步的分析和处理。我们可以使用<a href="https://golang.org/pkg/reflect/#ValueOf" target="_blank" rel="noopener">reflect.ValueOf()</a>方法获取Value对象。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">value := reflect.ValueOf(i) <span class="comment">// 使用ValueOf()获取到变量的Value对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s S</span><br><span class="line">value2 := reflect.ValueOf(s) <span class="comment">// 使用ValueOf()获取到结构体的Value对象</span></span><br></pre></td></tr></table></figure><p>获取到对象或者变量的Value对象后，我们就可以对他们进一步的操作了。</p><h3 id="1-获取对象或者变量的类型-Value-Type-和Value-Kind"><a href="#1-获取对象或者变量的类型-Value-Type-和Value-Kind" class="headerlink" title="1.获取对象或者变量的类型(Value.Type()和Value.Kind())"></a>1.获取对象或者变量的类型(Value.Type()和Value.Kind())</h3><p><a href="https://golang.org/pkg/reflect/#Value.Type" target="_blank" rel="noopener">Value.Type()</a>和<a href="https://golang.org/pkg/reflect/#Value.Kind" target="_blank" rel="noopener">Value.Kind()</a>这两个方法都可以获取对象或者变量的类型，如果是变量的话，使用这两个方法获取到的类型都是一样，差别是结构体对象，举个例子看一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">value := reflect.ValueOf(i)</span><br><span class="line"></span><br><span class="line">log.Println(value.Type()) <span class="comment">//输出:int</span></span><br><span class="line">log.Println(value.Kind()) <span class="comment">//输出:int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s S</span><br><span class="line">value2 := reflect.ValueOf(s) <span class="comment">// 使用ValueOf()获取到结构体的Value对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.Println(value2.Type()) <span class="comment">//输出:S</span></span><br><span class="line">log.Println(value2.Kind()) <span class="comment">//输出:struct</span></span><br></pre></td></tr></table></figure><p>变量<code>i</code>使用kind和type两个方法都输出了<code>int</code>,而结构体<code>s</code>的Type()方法输出了<code>S</code>,Kind()方法输出了<code>struct</code>，由此可以总结如下，如果你想拿到结构体里面定义的变量信息的时候，使用Type(f)方法。如果只是相判断是否是结构体时，就使用Kind()</p><h3 id="2-获取变量的值和给变量赋值"><a href="#2-获取变量的值和给变量赋值" class="headerlink" title="2.获取变量的值和给变量赋值"></a>2.获取变量的值和给变量赋值</h3><p>获取变量的值使用<a href="https://golang.org/pkg/reflect/#Value.Interface" target="_blank" rel="noopener">value.Interface()</a>方法，该方法会返回一个value的值，不过类型是interface。给变量赋值需要先判断该变量的类型，使用之前提到过的Value.Kind()方法，如果变量的类型是reflect.Int，我们就可以使用<a href="https://golang.org/pkg/reflect/#Value.SetInt" target="_blank" rel="noopener">Value.SetInt()</a>方法给变量赋值。下面是一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Value,这里注意,如果你要改变这个变量的话,需要传递变量的地址</span></span><br><span class="line">value := reflect.ValueOf(&amp;i)</span><br><span class="line"></span><br><span class="line"><span class="comment">// value是一个指针,这里获取了该指针指向的值,相当于value.Elem()</span></span><br><span class="line">value = reflect.Indirect(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interface是获取该value的值,返回的是一个interface对象</span></span><br><span class="line">log.Println(value.Interface()) <span class="comment">// 输出:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把变量i的值设为2</span></span><br><span class="line"><span class="keyword">if</span> value.Kind() == reflect.Int &#123;</span><br><span class="line">value.SetInt(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(value.Interface()) <span class="comment">// 输出:2</span></span><br></pre></td></tr></table></figure><p>给结构体对象中的成员变量赋值的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="keyword">string</span> <span class="comment">// 注意:只有大写开头的成员变量可以Set</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s := S&#123;<span class="string">"x"</span>&#125;</span><br><span class="line"></span><br><span class="line">value := reflect.ValueOf(&amp;s)</span><br><span class="line"></span><br><span class="line">value = reflect.Indirect(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//value是结构体s,所以打印出来的是整个结构体的信息</span></span><br><span class="line">log.Println(value.Interface()) <span class="comment">//输出: &#123;x&#125;</span></span><br><span class="line"></span><br><span class="line">f0 := value.FieldByName(<span class="string">"A"</span>) <span class="comment">//获取结构体s中第一个元素a</span></span><br><span class="line"></span><br><span class="line">log.Println(f0) <span class="comment">// 输出: x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> f0.Kind() == reflect.String &#123;</span><br><span class="line"><span class="keyword">if</span> f0.CanSet() &#123;</span><br><span class="line">f0.SetString(<span class="string">"y"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(f0) <span class="comment">// 输出: y</span></span><br><span class="line"></span><br><span class="line">log.Println(value.Interface()) <span class="comment">//输出: &#123;y&#125;</span></span><br></pre></td></tr></table></figure><p>结构体这里需要注意的是，只有公有的成员变量可以被reflect改变值，私有的变量是无法改变值得。</p><h3 id="3-获取结构体成员变量的tag信息"><a href="#3-获取结构体成员变量的tag信息" class="headerlink" title="3.获取结构体成员变量的tag信息"></a>3.获取结构体成员变量的tag信息</h3><p>由于golang变量大小写和公有私有息息相关，所以码农门很难按照自己的意愿来定义变量名。于是golang提供了tag机制，来给变量提供一个标签，这个标签可以作为一个别名，来给一些存储结构来获取结构体变量名字使用。下面是一个获取结构体成员变量tag信息的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;</span><br><span class="line">A <span class="keyword">string</span> <span class="string">`json:"tag_a"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s := S&#123;&#125;</span><br><span class="line"></span><br><span class="line">value := reflect.ValueOf(&amp;s)</span><br><span class="line"></span><br><span class="line">value = reflect.Indirect(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取结构体s的类型S</span></span><br><span class="line">vt := value.Type()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取S中的A成员变量</span></span><br><span class="line">f, _ := vt.FieldByName(<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取成员变量A的db标签</span></span><br><span class="line">log.Println(f.Tag.Get(<span class="string">"json"</span>)) <span class="comment">//输出: tag_a</span></span><br></pre></td></tr></table></figure><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在写一个自动生成api文档的功能，用到了reflect包来给结构体赋值，给空数组新增一个元素，这样只要定义一个input结构体和一个output的结构体，并填写一些相关tag信息，就能使用程序来生成输入和输出的相关文档。&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="golang" scheme="http://andyli.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>《架构即未来》中最常用的15个架构原则</title>
    <link href="http://andyli.me/2017/12/07/framework-15-principle/"/>
    <id>http://andyli.me/2017/12/07/framework-15-principle/</id>
    <published>2017-12-07T04:06:07.851Z</published>
    <updated>2017-12-08T12:14:38.644Z</updated>
    
    <content type="html"><![CDATA[<p>《架构即未来》这本书的第12章简单阐述了架构设计的一些常用的原则（后面章节会详细阐述）。这些原则中很多都是在架构一开始的设计中就要考虑进去的，这样在出现任何问题时，我们都能够及时的处理，和把问题影响的范围有效的缩小。否则就像我现在的项目，一开始设计时，考虑的很少，出问题时，没有做到及时的反馈，和缩小影响范围，只能在事故的代价中将所需要的原则添加进来，慢慢完善。</p><h3 id="1-N-1设计"><a href="#1-N-1设计" class="headerlink" title="1.N+1设计"></a>1.N+1设计</h3><blockquote><p>要确保任何你所开发的系统在发生故障时，至少有一个冗余的实例。</p></blockquote><p>一个实例确实很危险，当这个实例出现不明原因的问题不能对外服务，需要debug的时候，如果优先debug，那当前实例就要暂停服务直到你找到问题为止。如果你直接重启实例恢复服务，就没有事故现场进行debug了。而这时如果有一个冗余的实例，就可以先让冗余的实例对外服务，事故现场的环境也得以保留。</p><p>多个实例来做负载均衡也是一种不错的选择。</p><h3 id="2-回滚设计"><a href="#2-回滚设计" class="headerlink" title="2.回滚设计"></a>2.回滚设计</h3><blockquote><p>确保系统可以回滚到以前发布过的任何版本。</p></blockquote><p>以前做游戏的时候经常遇到回滚，有时候是数据库回滚，有时候是服务器端回滚，一般都是回滚到上个版本。</p><h3 id="3-禁用设计"><a href="#3-禁用设计" class="headerlink" title="3.禁用设计"></a>3.禁用设计</h3><blockquote><p>能够关闭任何发布的功能。</p></blockquote><p>当一个功能出现严重问题不得不关闭时，如果关闭整个系统代价就有点大了，所有要有单个功能的开关。像商城系统的支付功能就一定要有开关，如果出现比较严重的bug，可以关闭支付而不影响下单。</p><h3 id="4-监控设计"><a href="#4-监控设计" class="headerlink" title="4.监控设计"></a>4.监控设计</h3><blockquote><p>在设计阶段就必须要考虑监控，而不是在实施完成之后补充。</p></blockquote><p>如果监控做的好，不仅能发现服务的死活，检查日志文件，还能收集系统相关的数据，评估终端用户的响应时间。如果系统和应用在设计和构建时就考虑好监控，那么即使不能自我修复，也至少可以自我诊断。</p><h3 id="5-设计多活数据中心"><a href="#5-设计多活数据中心" class="headerlink" title="5.设计多活数据中心"></a>5.设计多活数据中心</h3><blockquote><p>不要被一个数据中心的解决方案把自己限制住。</p></blockquote><p>有钱就多建一个，让股东放心。</p><h3 id="6-只用成熟的技术"><a href="#6-只用成熟的技术" class="headerlink" title="6.只用成熟的技术"></a>6.只用成熟的技术</h3><blockquote><p>只用确实好用的技术。</p></blockquote><p>不管用什么技术，都要确保是一个成熟的技术。也许某个新技术有众多优点，比如，降低开发成本，提高开发效率，提高可扩展能力，减少终端用户的响应时间。但是，只要这项技术故障率比较高，就绝不能使用。</p><h3 id="7-异步设计"><a href="#7-异步设计" class="headerlink" title="7.异步设计"></a>7.异步设计</h3><blockquote><p>只有在绝对必要的时候才进行同步调用。</p></blockquote><p>异步适合并发。</p><h3 id="8-无状态系统"><a href="#8-无状态系统" class="headerlink" title="8.无状态系统"></a>8.无状态系统</h3><blockquote><p>只有当业务确实需要的时候，才使用状态。</p></blockquote><p>无状态的系统更利于扩展，更利于做负载均衡。</p><h3 id="9-水平扩展非垂直升级"><a href="#9-水平扩展非垂直升级" class="headerlink" title="9.水平扩展非垂直升级"></a>9.水平扩展非垂直升级</h3><blockquote><p>永远不要依赖更大、更快的系统。</p></blockquote><p>微服务是水平扩展的一个例子，不要把所有的功能都集中在一个系统里面。必要的时候把需求分为多个系统，而不是升级原有的系统。</p><h3 id="10-设计至少有两个步骤的前瞻性"><a href="#10-设计至少有两个步骤的前瞻性" class="headerlink" title="10.设计至少有两个步骤的前瞻性"></a>10.设计至少有两个步骤的前瞻性</h3><blockquote><p>在扩展性问题发生前考虑好下一步的行动计划。</p></blockquote><p>想的更远一点，就能减少重构的次数。</p><h3 id="11-非核心则购买"><a href="#11-非核心则购买" class="headerlink" title="11.非核心则购买"></a>11.非核心则购买</h3><blockquote><p>如果不是你最擅长的，也提供不了差异化的竞争优势则直接购买。</p></blockquote><p>云服务这种的就购买好了。</p><h3 id="12-使用商品化硬件"><a href="#12-使用商品化硬件" class="headerlink" title="12.使用商品化硬件"></a>12.使用商品化硬件</h3><blockquote><p>在大多数情况下，便宜的是最好的。</p></blockquote><p>硬件这块儿，满足需求即可，在必要的时候增加配置。</p><h3 id="13-小构建，小发布，快试错"><a href="#13-小构建，小发布，快试错" class="headerlink" title="13.小构建，小发布，快试错"></a>13.小构建，小发布，快试错</h3><blockquote><p>全部研发要小构建，不断迭代，让系统不断地成长。</p></blockquote><p>小版本的失败率较低，因为失败率与解决方案中的变更数量直接相关。</p><h3 id="14-隔离故障"><a href="#14-隔离故障" class="headerlink" title="14.隔离故障"></a>14.隔离故障</h3><blockquote><p>实现隔离故障设计，通过断路保护避免故障传播和交叉影响。</p></blockquote><p>避免多系统之间的互相影响，这个很重要。</p><h3 id="15-自动化"><a href="#15-自动化" class="headerlink" title="15.自动化"></a>15.自动化</h3><blockquote><p>设计和构建自动化的过程。如果机器可以做，就不要依赖于人。</p></blockquote><p>人常犯错误，更令人沮丧的是，他们往往会以不同的方式多次犯同样的错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《架构即未来》这本书的第12章简单阐述了架构设计的一些常用的原则（后面章节会详细阐述）。这些原则中很多都是在架构一开始的设计中就要考虑进去的，这样在出现任何问题时，我们都能够及时的处理，和把问题影响的范围有效的缩小。否则就像我现在的项目，一开始设计时，考虑的很少，出问题时，
      
    
    </summary>
    
    
      <category term="architect" scheme="http://andyli.me/tags/architect/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d-x中的sprite描边(Outline)</title>
    <link href="http://andyli.me/2017/12/07/cocos2d-x-outline-shader/"/>
    <id>http://andyli.me/2017/12/07/cocos2d-x-outline-shader/</id>
    <published>2017-12-07T04:06:07.850Z</published>
    <updated>2017-12-08T12:14:08.786Z</updated>
    
    <content type="html"><![CDATA[<p>Cocos2d-x 3.x的label使用了freetype字体引擎（<a href="http://www.freetype.org/），可以很轻松的实现描边和阴影效果。所以本篇文章只针对于`sprite`来实现描边效果。" target="_blank" rel="noopener">http://www.freetype.org/），可以很轻松的实现描边和阴影效果。所以本篇文章只针对于`sprite`来实现描边效果。</a></p><p>官方demo中描边shader没有看懂，看效果好像是有点问题，透明的部分变成了黑色。作者也没有怎么解释，直接丢了一个网址出来（<a href="http://www.idevgames.com/forums/thread-3010.html），看样子是参考了这个帖子。" target="_blank" rel="noopener">http://www.idevgames.com/forums/thread-3010.html），看样子是参考了这个帖子。</a></p><p>后来从网上别人的博客中找到了一遍关于描边shader的文章，这篇文章用的方法跟我想的差不多，优点是很容易理解，缺点是相对于官方demo给的描边shader效率上差了点。原文地址：<a href="http://blog.csdn.net/u011281572/article/details/44999609。" target="_blank" rel="noopener">http://blog.csdn.net/u011281572/article/details/44999609。</a></p><p>原文的代码考虑了label的描边，这个对于现在的cocos3.x版本来说有点多余，我就对原文的代码做了些改动，去掉了label描边的那块儿代码，有些逻辑也做了一些改变，使得更容易理解一些。</p><p>下面是我改动后的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">varying vec4 v_fragmentColor; <span class="comment">// vertex shader传入，setColor设置的颜色</span></span><br><span class="line">varying vec2 v_texCoord; <span class="comment">// 纹理坐标</span></span><br><span class="line">uniform <span class="keyword">float</span> outlineSize; <span class="comment">// 描边宽度，以像素为单位</span></span><br><span class="line">uniform vec3 outlineColor; <span class="comment">// 描边颜色</span></span><br><span class="line">uniform vec2 textureSize; <span class="comment">// 纹理大小（宽和高），为了计算周围各点的纹理坐标，必须传入它，因为纹理坐标范围是0~1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断在这个角度上距离为outlineSize那一点是不是透明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIsStrokeWithAngel</span><span class="params">(<span class="keyword">float</span> angel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> stroke = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> rad = angel * <span class="number">0.01745329252</span>; <span class="comment">// 这个浮点数是 pi / 180，角度转弧度</span></span><br><span class="line">    vec2 unit = <span class="number">1.0</span> / textureSize.xy;<span class="comment">//单位坐标</span></span><br><span class="line">    vec2 offset = vec2(outlineSize * <span class="built_in">cos</span>(rad) * unit.x, outlineSize * <span class="built_in">sin</span>(rad) * unit.y); <span class="comment">//偏移量</span></span><br><span class="line">    <span class="keyword">float</span> a = texture2D(CC_Texture0, v_texCoord + offset).a;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= <span class="number">0.5</span>)<span class="comment">// 我把alpha值大于0.5都视为不透明，小于0.5都视为透明</span></span><br><span class="line">    &#123;</span><br><span class="line">        stroke = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stroke;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec4 myC = texture2D(CC_Texture0, v_texCoord); <span class="comment">// 正在处理的这个像素点的颜色</span></span><br><span class="line">    <span class="keyword">if</span> (myC.a &gt;= <span class="number">0.5</span>) <span class="comment">// 不透明，不管，直接返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        gl_FragColor = v_fragmentColor * myC;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里肯定有朋友会问，一个for循环就搞定啦，怎么这么麻烦！其实我一开始也是用for的，但后来在安卓某些机型（如小米4）会直接崩溃，查找资料发现OpenGL es并不是很支持循环，while和for都不要用</span></span><br><span class="line">    <span class="keyword">int</span> strokeCount = <span class="number">0</span>;</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">0.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">30.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">60.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">90.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">120.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">150.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">180.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">210.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">240.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">270.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">300.0</span>);</span><br><span class="line">    strokeCount += getIsStrokeWithAngel(<span class="number">330.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strokeCount &gt; <span class="number">0</span>) <span class="comment">// 四周围至少有一个点是不透明的，这个点要设成描边颜色</span></span><br><span class="line">    &#123;</span><br><span class="line">        myC.rgb = outlineColor;</span><br><span class="line">        myC.a = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl_FragColor = v_fragmentColor * myC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致的逻辑是：<br>先判断当前像素是否透明，如果不透明则直接返回。如果是透明像素，就判断这个点周围12个方向，每个方向距离当前像素距离是outlineSize的像素点是否透明，只要有一个是非透明像素，就把当前像素点设为描边的颜色，并设置成非透明。<br>效果如下：<br><img src="http://img.blog.csdn.net/20160220154537210" alt="outline"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cocos2d-x 3.x的label使用了freetype字体引擎（&lt;a href=&quot;http://www.freetype.org/），可以很轻松的实现描边和阴影效果。所以本篇文章只针对于`sprite`来实现描边效果。&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
      <category term="cocos2d-x" scheme="http://andyli.me/tags/cocos2d-x/"/>
    
      <category term="shader" scheme="http://andyli.me/tags/shader/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d-x中的灰度shader</title>
    <link href="http://andyli.me/2017/12/07/cocos2d-x-gray-shader/"/>
    <id>http://andyli.me/2017/12/07/cocos2d-x-gray-shader/</id>
    <published>2017-12-07T04:06:07.849Z</published>
    <updated>2017-12-08T12:13:25.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="灰度shader"><a href="#灰度shader" class="headerlink" title="灰度shader"></a>灰度shader</h3><p>最近在学习shader，就把cocos2d-x 3.x版本中的很简单也很常用的灰度shader拿出来学习一下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> GL_ES</span></span><br><span class="line">precision mediump <span class="keyword">float</span>; <span class="comment">// ES版本的精度限定符，精度变低后可以提高效率</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">varying vec4 v_fragmentColor;</span><br><span class="line">varying vec2 v_texCoord;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     vec4 c </span>= texture2D(CC_Texture0, v_texCoord);</span><br><span class="line">     gl_FragColor.xyz = vec3(<span class="number">0.2126</span>*c.r + <span class="number">0.7152</span>*c.g + <span class="number">0.0722</span>*c.b);</span><br><span class="line">     gl_FragColor.w = c.w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><code>precision mediump float</code>是open es特有的精度限定符，原本的浮点数精度是<code>double</code>，opengl es为了提高渲染效率，限定精度为<code>float</code>类型。</p><p><code>v_fragmentColor</code>是从顶点着色器设置的颜色经过光栅化阶段的线性插值后传给片段着色器的颜色。</p><p><code>v_texCoord</code>同样是经过线性插值而来的纹理坐标。</p><p>下面是顶点着色器的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ccPositionTextureColor_noMVP_vert = STRINGIFY(</span><br><span class="line">attribute vec4 a_position;</span><br><span class="line">attribute vec2 a_texCoord;</span><br><span class="line">attribute vec4 a_color;</span><br><span class="line"></span><br><span class="line">\n#ifdef GL_ES\n</span><br><span class="line">varying lowp vec4 v_fragmentColor;</span><br><span class="line">varying mediump vec2 v_texCoord;</span><br><span class="line">\n#<span class="keyword">else</span>\n</span><br><span class="line">varying vec4 v_fragmentColor;</span><br><span class="line">varying vec2 v_texCoord;</span><br><span class="line">\n#endif\n</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    gl_Position = CC_PMatrix * a_position;</span><br><span class="line">    v_fragmentColor = a_color;</span><br><span class="line">    v_texCoord = a_texCoord;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>CC_Texture0</code>是一个采样器，在load shader的时候，引擎会预先把这些<code>uniform</code>变量给加载进来。<br>下面这部分代码就是引擎预先加载进来的<code>uniform</code>变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> * COCOS2D_SHADER_UNIFORMS =</span><br><span class="line">        <span class="string">"uniform mat4 CC_PMatrix;\n"</span></span><br><span class="line">        <span class="string">"uniform mat4 CC_MVMatrix;\n"</span></span><br><span class="line">        <span class="string">"uniform mat4 CC_MVPMatrix;\n"</span></span><br><span class="line">        <span class="string">"uniform mat3 CC_NormalMatrix;\n"</span></span><br><span class="line">        <span class="string">"uniform vec4 CC_Time;\n"</span></span><br><span class="line">        <span class="string">"uniform vec4 CC_SinTime;\n"</span></span><br><span class="line">        <span class="string">"uniform vec4 CC_CosTime;\n"</span></span><br><span class="line">        <span class="string">"uniform vec4 CC_Random01;\n"</span></span><br><span class="line">        <span class="string">"uniform sampler2D CC_Texture0;\n"</span></span><br><span class="line">        <span class="string">"uniform sampler2D CC_Texture1;\n"</span></span><br><span class="line">        <span class="string">"uniform sampler2D CC_Texture2;\n"</span></span><br><span class="line">        <span class="string">"uniform sampler2D CC_Texture3;\n"</span></span><br><span class="line">        <span class="string">"//CC INCLUDES END\n\n"</span>;</span><br></pre></td></tr></table></figure><p>这些变量在shader里面如果没有用到的话，会被引擎给优化掉。</p><p><code>texture2D()</code>是shader的内建方法，作用是从<code>CC_Texture0</code>采样器中进行纹理采样，得到当前片段的颜色值。</p><p><code>gl_FragColor</code>是shader的内建变量，表示当前片段的颜色，代码中是把从采样器中拿到的颜色值进行一个变灰处理后，最后得到的颜色值再赋值给<code>gl_FragColor</code>。<code>gl_FragColor</code>就是最终的颜色。</p><p>这个shader很简单，就是改变了一下rgb的值。<code>0.2126</code>，<code>0.7152</code>，<code>0.0722</code>这几个系数据说是根据人眼对rgb这三种基本颜色识别的强弱算出来的。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在cocos2dx  3.x版本中sprite变灰的代码例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> sprite = Sprite::create(<span class="string">"HelloWorld.png"</span>);</span><br><span class="line">sprite-&gt;setGLProgramState(GLProgramState::getOrCreateWithGLProgramName(GLProgram::SHADER_NAME_POSITION_GRAYSCALE));</span><br></pre></td></tr></table></figure></p><p>效果如下图所示：<br><img src="http://img.blog.csdn.net/20160202150852954" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;灰度shader&quot;&gt;&lt;a href=&quot;#灰度shader&quot; class=&quot;headerlink&quot; title=&quot;灰度shader&quot;&gt;&lt;/a&gt;灰度shader&lt;/h3&gt;&lt;p&gt;最近在学习shader，就把cocos2d-x 3.x版本中的很简单也很常用的灰度shade
      
    
    </summary>
    
    
      <category term="cocos2d-x" scheme="http://andyli.me/tags/cocos2d-x/"/>
    
      <category term="shader" scheme="http://andyli.me/tags/shader/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d-x中的模糊(Blur)</title>
    <link href="http://andyli.me/2017/12/07/cocos2d-x-blur-shader/"/>
    <id>http://andyli.me/2017/12/07/cocos2d-x-blur-shader/</id>
    <published>2017-12-07T04:06:07.848Z</published>
    <updated>2017-12-08T12:13:37.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>模糊效果在游戏中经常会用到，有的为了突出前景会把背景给模糊化，有的是因为一些技能需要模糊效果。模糊是shader中较为简单的一种应用。cocos2dx 3.x给的demo中，就有sprite的模糊的效果。</p></blockquote><p>先说下这个模糊算法的大致思路，我们在片段着色器中可以得到当前像素点的颜色值，要想让这个颜色变得模糊，就要让它与它周围的像素点的颜色稍微接近一点，那么我们就需要拿到这个像素点周围的像素点的颜色值，我们把这些个像素点的值加起来取平均值，就得到了一个区域内的平均颜色。<br>如果直接使用这个颜色的话，最终的效果会变得很模糊，如果我们只是想稍微模糊一点的话，就要让这个平均值更接近于当前像素点原本的颜色，为此，我们取均值的时候对每个像素点增加了一个权重的定义，当前像素点的权重最高，依次向周围减弱，使得最后得到的均值的颜色更接近于当前像素点原始的颜色。</p><p>看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> GL_ES</span></span><br><span class="line">precision mediump <span class="keyword">float</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">varying vec4 v_fragmentColor;</span><br><span class="line">varying vec2 v_texCoord;</span><br><span class="line"></span><br><span class="line">uniform vec2 resolution;<span class="comment">//模糊对象的实际分辨率</span></span><br><span class="line">uniform <span class="keyword">float</span> blurRadius;<span class="comment">//半径</span></span><br><span class="line">uniform <span class="keyword">float</span> sampleNum;<span class="comment">//间隔的段数</span></span><br><span class="line"></span><br><span class="line"><span class="function">vec4 <span class="title">blur</span><span class="params">(vec2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec4 col = blur(v_texCoord); <span class="comment">//* v_fragmentColor.rgb;</span></span><br><span class="line">    gl_FragColor = vec4(col) * v_fragmentColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vec4 <span class="title">blur</span><span class="params">(vec2 p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blurRadius &gt; <span class="number">0.0</span> &amp;&amp; sampleNum &gt; <span class="number">1.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vec4 col = vec4(<span class="number">0</span>);</span><br><span class="line">        vec2 unit = <span class="number">1.0</span> / resolution.xy;<span class="comment">//单位坐标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> r = blurRadius;</span><br><span class="line">        <span class="keyword">float</span> sampleStep = r / sampleNum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> count = <span class="number">0.0</span>;</span><br><span class="line">        <span class="comment">//遍历一个矩形，当前的坐标为中心点，遍历矩形中每个像素点的颜色</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">float</span> x = -r; x &lt; r; x += sampleStep)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">float</span> y = -r; y &lt; r; y += sampleStep)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">float</span> weight = (r - <span class="built_in">abs</span>(x)) * (r - <span class="built_in">abs</span>(y));<span class="comment">//权重，p点的权重最高，向四周依次减少</span></span><br><span class="line">                col += texture2D(CC_Texture0, p + vec2(x * unit.x, y * unit.y)) * weight;</span><br><span class="line">                count += weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//得到实际模糊颜色的值</span></span><br><span class="line">        <span class="keyword">return</span> col / count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> texture2D(CC_Texture0, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>精度限定符和<code>varying</code>变量等的一些基础的知识在前面的博客中遇到的已经说过。<br><code>uniform</code>变量是顶点着色器和片段着色器共享使用的变量，<code>uniform</code>的值不能被改变。<br><code>uniform</code>变量是由宿主程序设置的，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> EffectBlur::setTarget(EffectSprite *sprite)</span><br><span class="line">&#123;</span><br><span class="line">    Size size = sprite-&gt;getTexture()-&gt;getContentSizeInPixels();</span><br><span class="line">    _glprogramstate-&gt;setUniformVec2(<span class="string">"resolution"</span>, size);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM != CC_PLATFORM_WINRT)</span></span><br><span class="line">    _glprogramstate-&gt;setUniformFloat(<span class="string">"blurRadius"</span>, _blurRadius);</span><br><span class="line">    _glprogramstate-&gt;setUniformFloat(<span class="string">"sampleNum"</span>, _blurSampleNum);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里宿主程序设置了<code>resolution</code>，<code>blurRadius</code>和<code>sampleNum</code>三个<code>uniform</code>变量。渲染的时候，顶点着色器和片段着色器都可以用到这三个变量的值。<br><code>resolution</code>是当前渲染node的实际分辨率。<br><code>blurRadius</code>是像素点模糊处理的参考矩形的半径<br><code>sampleNum</code>选择像素点的间隔的数量，相邻像素点的间距等于<code>blurRadius / sampleNum</code></p><p><code>blur</code>函数就是计算该像素点的最终颜色，参数<code>p</code>是当前像素点的坐标，我们以<code>p</code>点为中点以<code>2r</code>为边长得到一个矩形，这个矩形中每隔<code>sampleStep</code>长度的像素点是当前像素点的颜色参考像素。每个像素点会乘以一个<code>weight</code>权重，这个<code>weight</code>越靠近<code>p</code>点值越高，目的是为了让最终的值更接近于<code>p</code>点的像素颜色，然后各个像素点乘以权重后的颜色加起来，得到<code>col</code>，把各个权重也加起来得到<code>count</code>。最终的颜色值就是<code>col/count</code>。</p><p>效果图如下：<br>模糊前：<br><img src="http://img.blog.csdn.net/20160217163840888" alt="模糊前"><br>模糊后：<br><img src="http://img.blog.csdn.net/20160217163855206" alt="模糊后"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;模糊效果在游戏中经常会用到，有的为了突出前景会把背景给模糊化，有的是因为一些技能需要模糊效果。模糊是shader中较为简单的一种应用。cocos2dx 3.x给的demo中，就有sprite的模糊的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="cocos2d-x" scheme="http://andyli.me/tags/cocos2d-x/"/>
    
      <category term="shader" scheme="http://andyli.me/tags/shader/"/>
    
  </entry>
  
</feed>
